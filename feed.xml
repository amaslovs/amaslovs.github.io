<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://amaslovs.github.io/</id><title>Aleksandrs Maslovs</title><subtitle>Tech and not so tech focused blog from Aleksandrs Maslovs.</subtitle> <updated>2024-10-02T19:38:03+03:00</updated> <author> <name>Aleksandrs Maslovs</name> <uri>https://amaslovs.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://amaslovs.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://amaslovs.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 Aleksandrs Maslovs </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Defining dependency scope within BackgroundService</title><link href="https://amaslovs.github.io/posts/defining-dependancy-scope/" rel="alternate" type="text/html" title="Defining dependency scope within BackgroundService" /><published>2024-10-02T06:00:00+03:00</published> <updated>2024-10-02T06:00:00+03:00</updated> <id>https://amaslovs.github.io/posts/defining-dependancy-scope/</id> <content src="https://amaslovs.github.io/posts/defining-dependancy-scope/" /> <author> <name>Aleksandrs Maslovs</name> </author> <category term="Web API" /> <summary> Issue In this blog post I’ll describe a situation I encountered in one of my projects, where I had to access an interface that was registered as a scoped service from BackgroundService, which is singleton. In essence, I’ll describe a neat trick on how to access scoped service from singleton service. In the Program.cs of this example web app we have our initialization of builder and method tha... </summary> </entry> <entry><title>Using threading channels</title><link href="https://amaslovs.github.io/posts/threading-channels/" rel="alternate" type="text/html" title="Using threading channels" /><published>2023-02-10T06:00:00+02:00</published> <updated>2023-02-10T06:00:00+02:00</updated> <id>https://amaslovs.github.io/posts/threading-channels/</id> <content src="https://amaslovs.github.io/posts/threading-channels/" /> <author> <name>Aleksandrs Maslovs</name> </author> <category term="Threading" /> <summary> Idea behind… In one of my tasks I had a case where I had to use the same Azure ServiceBus message from one subscription in multiple Web API endpoints. One of these endpoints serves data on publish/subscribe basis and has to execute publish operation as soon as something new becomes available. Solution In order to utilize a single subscription in ServiceBus, a single reader was created for re... </summary> </entry> <entry><title>Defining Web API result</title><link href="https://amaslovs.github.io/posts/web-api-result-as/" rel="alternate" type="text/html" title="Defining Web API result" /><published>2022-10-27T06:00:00+03:00</published> <updated>2022-10-28T13:17:26+03:00</updated> <id>https://amaslovs.github.io/posts/web-api-result-as/</id> <content src="https://amaslovs.github.io/posts/web-api-result-as/" /> <author> <name>Aleksandrs Maslovs</name> </author> <category term="Web API" /> <summary> In this blog I’m going to showcase how I handled a case when a customer required to have an endpoint which accepts XML object via POST and returns different XML object back. There are multiple ways to go about this, but the main ones would be to declare what we expect and what we will return in the API controller itself by attributes. If given API only serves XML type responses we could do thi... </summary> </entry> <entry><title>Creating Web API background service</title><link href="https://amaslovs.github.io/posts/web-api-backgroundservice/" rel="alternate" type="text/html" title="Creating Web API background service" /><published>2022-10-06T06:00:00+03:00</published> <updated>2022-10-28T13:35:11+03:00</updated> <id>https://amaslovs.github.io/posts/web-api-backgroundservice/</id> <content src="https://amaslovs.github.io/posts/web-api-backgroundservice/" /> <author> <name>Aleksandrs Maslovs</name> </author> <category term="Web API" /> <summary> In ASP.NET Core we can implement background tasks, or Hosted Services, that aid desired logic of a particular application. Previously I wrote about one potential use case of such background task here. Since .NET Core 2.0 we can use IHostedService interface to easily implement hosted services for our applications. In the context of the given example I’m using the BackgroundService base class t... </summary> </entry> <entry><title>Web API with ServiceBus and caching</title><link href="https://amaslovs.github.io/posts/web-api-servicebus/" rel="alternate" type="text/html" title="Web API with ServiceBus and caching" /><published>2022-10-06T06:00:00+03:00</published> <updated>2022-10-28T13:35:11+03:00</updated> <id>https://amaslovs.github.io/posts/web-api-servicebus/</id> <content src="https://amaslovs.github.io/posts/web-api-servicebus/" /> <author> <name>Aleksandrs Maslovs</name> </author> <category term="Architecture" /> <summary> Idea behind… In this blog post I’m going to showcase a neat way of preparing data for Web API, in cases when data comes from different application with the ability to have filtering applied. In this particular case my project has Azure Webjob that produces data snapshot which has to be exposed in Web API. In addition to exposing, Web API also has to convert that snapshot from domain model to s... </summary> </entry> </feed>
